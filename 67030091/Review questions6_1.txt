1 Docker vs Native Setup: อธิบายข้อดีของการใช้ Docker เปรียบเทียบกับการติดตั้ง ESP-IDF บน host system
- การใช้ Docker ดีกว่าตรงที่ ติดตั้งง่ายและรวดเร็ว เพราะใช้ตู้คอนเทนเนอร์ที่มีทุกอย่างพร้อมอยู่แล้ว ทำให้ทุกคนในทีมทำงานใน สภาพแวดล้อมเดียวกัน ลดปัญหาความเข้ากันไม่ได้ 
นอกจากนี้ยัง ลบได้ง่ายและไม่ทิ้งไฟล์ขยะ ต่างจากการติดตั้งแบบปกติที่ยุ่งยากและอาจมีไฟล์ตกค้าง

2 Build Process: อธิบายขั้นตอนการ build ของ ESP-IDF ใน Docker container ตั้งแต่ source code จนได้ binary
- ขั้นตอนคือ เข้า Docker container จากนั้น สั่งโหลด environment ของ ESP-IDF แล้ว กำหนดฮาร์ดแวร์เป้าหมาย (เช่น ESP32) สุดท้ายก็ใช้คำสั่ง build 
เพื่อสร้างโปรแกรม และจะได้ไฟล์ไบนารี (.bin) ที่พร้อมใช้งานในโฟลเดอร์ build/

3 CMake Files: บทบาทของไฟล์ CMakeLists.txt แต่ละไฟล์คืออะไร และทำงานอย่างไรใน Docker environment?
- ไฟล์หลัก: ทำหน้าที่ กำหนดชื่อโปรเจกต์ และ รวมเครื่องมือของ ESP-IDF เข้ามาใช้งาน

ไฟล์ใน main/: ระบุไฟล์โค้ดหลัก (.c) ที่ต้องนำมาคอมไพล์ และบอกที่อยู่ของไฟล์ header ที่จำเป็น

การทำงานใน Docker: CMake จะอ่านไฟล์เหล่านี้และ จัดการขั้นตอนการสร้างโปรแกรม ให้เป็นไปตามที่กำหนดอย่างเป็นระบบ

4 Git Ignore: ไฟล์ .gitignore มีความสำคัญอย่างไรสำหรับ ESP32 project development?
- ไฟล์ .gitignore มีความสำคัญในการ ป้องกันไม่ให้ไฟล์ที่ไม่จำเป็นถูก commit เช่น โฟลเดอร์ build/ หรือไฟล์ไบนารีต่างๆ ทำให้ Git repository มีขนาดเล็กและสะอาด 
นอกจากนี้ยังช่วย ป้องกันการเผลอ commit ข้อมูลสำคัญ อย่างไฟล์ key หรือรหัสผ่านอีกด้วย

5 Container Persistence: ข้อมูลใดบ้างที่จะหายไปเมื่อ restart container และข้อมูลใดที่จะอยู่ต่อ?
- ข้อมูลที่หายไป: ข้อมูลที่ถูกสร้างขึ้น ภายใน container และไม่ได้ถูกบันทึกไว้ที่อื่นจะหายไปเมื่อ container ถูก restart

ข้อมูลที่คงอยู่: ข้อมูลที่เรา mount หรือเชื่อมต่อจากคอมพิวเตอร์ของเรา (host) เข้าไปใน container เช่น โฟลเดอร์โปรเจกต์ จะยังคงอยู่และไม่หายไป

6 Development Workflow: เปรียบเทียบ workflow การพัฒนาระหว่างการใช้ Docker กับการทำงานบน native system
- แบบ Docker: ทำให้ สภาพแวดล้อมการพัฒนาเหมือนกันทุกเครื่อง ไม่ต้องติดตั้งเครื่องมือเอง และช่วย ลดปัญหาเวอร์ชันไม่ตรงกัน เหมาะกับการทำงานเป็นทีม

แบบ Native: ต้องติดตั้งและตั้งค่าทุกอย่างเอง ซึ่งยุ่งยากกว่า และมีโอกาสเกิดปัญหาได้ง่ายกว่า ทำให้ไม่เหมาะกับการทำงานร่วมกันเป็นทีมใหญ่ๆ
