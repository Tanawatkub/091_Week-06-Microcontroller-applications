1. Multiple Source Files: เหตุใดต้องแยก source code เป็นหลายไฟล์?
การแยก source code เป็นหลายไฟล์นั้นช่วยจัดระเบียบโค้ดให้เป็นระบบ ทำให้โค้ดอ่านง่ายขึ้นและเข้าใจได้ง่าย รวมถึงช่วยให้การบำรุงรักษาในระยะยาวทำได้สะดวก และยังทำให้โปรแกรมเมอร์หลายคนสามารถทำงานในส่วนต่างๆ ของโปรเจกต์ได้พร้อมกัน

2. CMakeLists.txt Management: การเพิ่มไฟล์ source ใหม่ต้องแก้ไขอะไรบ้าง?
เมื่อมีการเพิ่มไฟล์ source ใหม่เข้ามาในโปรเจกต์ จำเป็นต้องแก้ไขไฟล์ CMakeLists.txt โดยการเพิ่มชื่อไฟล์นั้นเข้าไปในคำสั่งที่ใช้ในการสร้างโปรแกรมหรือไลบรารี เช่น add_executable หรือ add_library เพื่อให้ CMake รู้ว่าต้องนำไฟล์ใหม่นี้ไปคอมไพล์และลิงก์เข้ากับโปรเจกต์

3. Header Files: บทบาทของไฟล์ .h คืออะไร และทำไมต้องมี?
ไฟล์ .h (header) ทำหน้าที่เป็น "เมนู" ที่ประกาศฟังก์ชัน คลาส และตัวแปรต่างๆ ให้โค้ดส่วนอื่นสามารถเรียกใช้ได้ โดยไม่จำเป็นต้องรู้รายละเอียดการทำงานทั้งหมดที่อยู่ในไฟล์ .c หรือ .cpp ทำให้การคอมไพล์โปรแกรมมีประสิทธิภาพมากขึ้น

4. Include Directories: เหตุใด CMakeLists.txt ต้องระบุ INCLUDE_DIRS?
CMakeLists.txt ต้องระบุ INCLUDE_DIRS เพื่อบอกคอมไพเลอร์ว่าต้องไปค้นหาไฟล์ header ที่ถูกเรียกใช้ด้วยคำสั่ง #include ได้จากที่ไหนบ้าง ทำให้การค้นหาไฟล์เป็นไปอย่างถูกต้องและสร้างโปรเจกต์ที่มีไฟล์ header จากหลายตำแหน่งได้

5. Git Ignore: ไฟล์ .gitignore ช่วยอะไรในการจัดการ ESP32 project?
ไฟล์ .gitignore จะช่วยระบุไฟล์และโฟลเดอร์ที่ไม่ต้องการให้ Git ติดตามและบันทึกไว้ใน repository เช่น ไฟล์ที่เกิดขึ้นระหว่างการคอมไพล์หรือไฟล์ชั่วคราว ทำให้ repository ของโปรเจกต์มีขนาดเล็ก สะอาด และไม่เก็บข้อมูลที่ไม่จำเป็น

6. Task Management: การใช้ FreeRTOS task ในโมดูล LED ช่วยอะไร?
การใช้ FreeRTOS task ในโมดูล LED ช่วยให้การทำงานของ LED เช่นการกระพริบ ทำงานได้อย่างอิสระจากโปรแกรมหลัก ทำให้โค้ดไม่ถูกบล็อกและโปรแกรมโดยรวมยังสามารถตอบสนองต่อคำสั่งอื่นๆ ได้ดีขึ้น

7. Code Organization: ข้อดีของการแยกโมดูล sensor, display, led เป็นไฟล์แยกคืออะไร?
ข้อดีของการแยกโค้ดสำหรับโมดูลต่างๆ ออกเป็นไฟล์คือ ทำให้โค้ดมีความชัดเจน อ่านง่าย สามารถนำโมดูลเหล่านั้นไปใช้ซ้ำในโปรเจกต์อื่นได้สะดวก และทำให้การบำรุงรักษาหรือการแก้ไขส่วนใดส่วนหนึ่งทำได้ง่ายโดยไม่กระทบกับส่วนอื่นๆ ของโปรเจกต์